JS Engine is a program that executes JS code
Most Famous is Google V8
Every browser has its own JS Engine

Components:

1. Call Stack- This contains execution context that executes the JS code.
2. Heap- Unstructured memory pool that stores all the obj that our app needs.

How code is converted to Machine Code?

Its a mixture of interpretation and compilation which is called "Just in Time Compilation"

JIT Compilation- Entire code is converted to machine code at once, then executed immediately.

Steps in JS-

Parsing (Reading) -> Compilation (Machine Code) -> Execution (happens in Call Stack) -> Optimization -> Compilation

Callback Queue- Contains all the events or callbeck function such as onClick

Event Loop- When the call stack is empty it takes the callback functions from the callback queue and puts it in the call stack for execution

Execution Context- Env in which a piece of JS is executed and all the necessary info is stored.

IMPORTANT:

1. Excatly one global execution context is created.
2. One excution context per function is created.

All Execution contexts make up the call stack.

Execution Context Components:

1. Variable Env
2. Scope Chain
3. this keyword

Global Scope: -Outside of any func or block
-Variables in this scope are accessible everywhere

Function Scope: -Variables are accessible only inside the function
-Also called local scope

Block Scope: -Variables are accessible only inside the block
-only Applies to let and const variable
-Functions are also block scoped in strict mode

What is the Temporal Dead Zone?

Unlike var, which can be accessed before it is declared, variables declared with let and constants declared using const cannot be accessed before their declaration.

console.log(foo); // undefined
var foo = 123;

console.log(foo); // Error
let foo = 123;

but they are hoisted!

This Keyword
Special varibale that is created for every Execution Context and it takes the value of the owner of the function in which the this keyword is used.

"This" is not static. It depends on how the function is called, and its value is only assigned when the function is actually called.
In a Method:
this = Obj that is calling the method

In an arrow function:
this = this of the surrounding function (lexical this)

In event listener:
this = DOM element that the handler is attached to

IMPORTANT:
this does not point to the function or variable env.

Primitive data types:
-Number
-String
-Boolean
-Undefined
-Null
-Symbol
-BigInt

                      ___

Reference Types(Objects) |
-Obj literals |
-Arrays |---> Stored in Heap
-Functions etc \_\_|
